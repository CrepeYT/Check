import { handleExportPDF } from '@/utils/exportPDFHandler';
import { uploadStudentsFromFile } from '@/utils/parseCSVFile';
import React, { useRef, useState } from 'react';
import QRCode from 'react-qr-code';

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
interface FileInfo {
    name: string;
    size: string;
    type: string;
    extension?: string;
    isSupported: boolean;
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
interface UploadResult {
    success: boolean;
    message: string;
    count?: number;
    errors?: string[];
    fileInfo?: FileInfo;
    totalRows?: number;
    collectionName?: string;
    error?: string;
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
interface UploadStatus {
    success: boolean;
    message: string;
    details?: UploadResult;
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î props ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö component
interface CreateQRCodeAndUploadProps {
    classId: string; // ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    currentUser: { uid: string } | null; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
}


const CreateQRCodeAndUpload: React.FC<CreateQRCodeAndUploadProps> = ({ classId, currentUser }) => {
    // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ QR code ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á modal
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input file
    const fileInputRef = useRef<HTMLInputElement>(null);
    const [qrCode, setQrCode] = useState<string | null>(null);
    const [showQRModal, setShowQRModal] = useState(false);
    const [isUploading, setIsUploading] = useState(false);
    const [uploadStatus, setUploadStatus] = useState<UploadStatus | null>(null);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    const allowedExtensions = ['.xlsx', '.xls', '.csv'];
    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();
    
    if (!allowedExtensions.includes(fileExtension)) {
        alert(`‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ${fileExtension} ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå .xlsx, .xls ‡∏´‡∏£‡∏∑‡∏≠ .csv`);
        // Reset input
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
        return;
    }

    setIsUploading(true);
    setUploadStatus(null);

    try {
        const result: UploadResult = await uploadStudentsFromFile(file, classId);

        setUploadStatus({
            success: result.success,
            message: result.message,
            details: result
        });

        if (result.success) {
            alert(`‚úÖ ${result.message}\nüìä ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.count} ‡∏Ñ‡∏ô`);
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if (result.errors && result.errors.length > 0) {
                console.warn("Upload errors:", result.errors);
                const errorMessage = result.errors.slice(0, 3).join('\n'); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                alert(`‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n${errorMessage}${result.errors.length > 3 ? '\n...(‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÜ)' : ''}`);
            }
        } else {
            alert(`‚ùå ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß\n${result.message}\n${result.error || ''}`);
        }
    } catch (error) {
        console.error("File upload error:", error);
        setUploadStatus({
            success: false,
            message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î"
        });
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå");
    } finally {
        setIsUploading(false);
        // Reset input ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
    }
};

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
    const handleCreateQR = () => {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á link ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR code ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ classId
        const qrLink = `https://your-app-url/class/${classId}`;
        setQrCode(qrLink);
        setShowQRModal(true); // ‡πÅ‡∏™‡∏î‡∏á modal QR code
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î modal QR code
    const handleCloseQR = () => {
        setShowQRModal(false);
    };

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Upload CSV ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î input file
    const onUploadButtonClick = () => {
        if (isUploading) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏ã‡πâ‡∏≥‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        fileInputRef.current?.click();
    };

    const handleExportClick = async () => {
        handleExportPDF(classId, currentUser);
    }


    return (
        <div>
            <div className="flex flex-row md:flex-col gap-2 items-center justify-center">
                <div>
                    <button
                        className="w-auto h-auto border-1 border-purple-600 text-purple-600 p-2 rounded-2xl hover:bg-purple-100"
                        onClick={handleCreateQR}
                    >
                        Create QR
                    </button>
                </div>
                <div>
                 {/* ‡∏ã‡πà‡∏≠‡∏ô input ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ */}
                 <input
                        type="file"
                        accept=".xlsx,.xls,.csv"
                        ref={fileInputRef}
                        style={{ display: 'none' }}
                        onChange={handleFileUpload}
                    />
                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î input file */}
                    <button
                        onClick={onUploadButtonClick}
                        disabled={isUploading}
                        className={`w-auto h-auto border-1 p-2 rounded-2xl transition-colors ${
                            isUploading 
                                ? 'border-gray-400 text-gray-400 cursor-not-allowed'
                                : 'border-purple-600 text-purple-600 hover:bg-purple-100'
                        }`}
                    >
                        {isUploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : 'Upload Excel/CSV'}
                    </button>
                </div>
                <div>
                    <button
                        onClick={handleExportClick}
                        className="border-1 border-purple-600 text-purple-600 p-2 rounded-2xl hover:bg-purple-100"
                    >
                        Export PDF
                    </button>
                </div>
            </div>

             {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
             {uploadStatus && !isUploading && (
                <div className={`mt-4 p-3 rounded-lg border ${
                    uploadStatus.success 
                        ? 'bg-green-50 border-green-200 text-green-700'
                        : 'bg-red-50 border-red-200 text-red-700'
                }`}>
                    <div className="font-medium">
                        {uploadStatus.success ? '‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}
                    </div>
                    <div className="text-sm mt-1">{uploadStatus.message}</div>
                    {uploadStatus.details?.count && (
                        <div className="text-sm mt-1">
                            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: {uploadStatus.details.count} ‡∏Ñ‡∏ô
                        </div>
                    )}
                </div>
            )}

            {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á QR Code */}
            {showQRModal && qrCode && (
                <div className="fixed inset-0 flex items-center justify-center z-10">
                    {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ */}
                    <div className="absolute inset-0" style={{ backgroundColor: 'rgba(0, 0, 0, 0.3)' }}></div>

                    {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á modal */}
                    <div className="relative bg-white rounded-4xl p-12 w-250 h-150 mx-4 shadow-lg overflow-hidden">
                        {/* ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô */}
                        <div className="absolute -top-16 -right-16 w-40 h-40 bg-purple-500 rounded-full"></div>

                        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î modal - ‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏ö‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á */}
                        <button
                            onClick={handleCloseQR}
                            className="absolute top-2 right-2 z-10 text-white hover:text-gray-200 transition-colors"
                        >
                            <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth="3">
                                <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>

                        {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á QR Code */}
                        <div className="flex items-center justify-center p-25">
                            <QRCode value={qrCode} size={280} />
                        </div>
                    </div>
                </div>
            )}

            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV */}
            <div>
                <div className="h-0 w-0">

                </div>
                {/* input file ‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ */}
                <input
                    id="csv-upload"
                    type="file"
                    accept=".csv"
                    // onChange={handleUploadCSV}
                    className="hidden"
                />
            </div>
        </div>
    );
};

export default CreateQRCodeAndUpload;